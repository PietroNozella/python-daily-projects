#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Analisador de Texto Simples
Um programa para analisar estat칤sticas b치sicas de texto
"""

import re
from collections import Counter
import string

class AnalisadorTexto:
    def __init__(self, texto=""):
        self.texto = texto.lower()
        self.palavras = self._extrair_palavras()
    
    def _extrair_palavras(self):
        """Extrai palavras do texto, removendo pontua칞칚o"""
        # Remove pontua칞칚o e divide em palavras
        texto_limpo = re.sub(r'[^\w\s]', '', self.texto)
        return texto_limpo.split()
    
    def contar_caracteres(self, incluir_espacos=True):
        """Conta o n칰mero total de caracteres"""
        if incluir_espacos:
            return len(self.texto)
        return len(self.texto.replace(' ', ''))
    
    def contar_palavras(self):
        """Conta o n칰mero de palavras"""
        return len(self.palavras)
    
    def contar_frases(self):
        """Conta o n칰mero de frases (aproximado)"""
        return len(re.findall(r'[.!?]+', self.texto))
    
    def palavras_mais_comuns(self, n=5):
        """Retorna as N palavras mais comuns"""
        contador = Counter(self.palavras)
        return contador.most_common(n)
    
    def palavra_mais_longa(self):
        """Encontra a palavra mais longa"""
        if not self.palavras:
            return ""
        return max(self.palavras, key=len)
    
    def contar_vogais_consoantes(self):
        """Conta vogais e consoantes"""
        vogais = "aeiou"
        contador_vogais = 0
        contador_consoantes = 0
        
        for char in self.texto:
            if char.isalpha():
                if char in vogais:
                    contador_vogais += 1
                else:
                    contador_consoantes += 1
        
        return contador_vogais, contador_consoantes
    
    def densidade_palavras_unicas(self):
        """Calcula a densidade de palavras 칰nicas"""
        if not self.palavras:
            return 0
        palavras_unicas = len(set(self.palavras))
        return round(palavras_unicas / len(self.palavras) * 100, 2)
    
    def relatorio_completo(self):
        """Gera um relat칩rio completo da an치lise"""
        vogais, consoantes = self.contar_vogais_consoantes()
        
        relatorio = f"""
=== RELAT칍RIO DE AN츼LISE DE TEXTO ===

游늵 Estat칤sticas B치sicas:
- Caracteres (com espa칞os): {self.contar_caracteres(True)}
- Caracteres (sem espa칞os): {self.contar_caracteres(False)}
- Palavras: {self.contar_palavras()}
- Frases: {self.contar_frases()}

游댟 An치lise de Letras:
- Vogais: {vogais}
- Consoantes: {consoantes}

游닇 An치lise de Palavras:
- Palavra mais longa: "{self.palavra_mais_longa()}"
- Densidade de palavras 칰nicas: {self.densidade_palavras_unicas()}%

游끥 Top 5 Palavras Mais Frequentes:
"""
        for i, (palavra, freq) in enumerate(self.palavras_mais_comuns(), 1):
            relatorio += f"  {i}. '{palavra}' - {freq} vezes\n"
        
        return relatorio

def main():
    """Fun칞칚o principal do programa"""
    print("游댌 Analisador de Texto Simples")
    print("=" * 35)
    
    # Texto de exemplo
    texto_exemplo = """
    Python 칠 uma linguagem de programa칞칚o de alto n칤vel, interpretada e de prop칩sito geral.
    Sua filosofia de design enfatiza a legibilidade do c칩digo com o uso de indenta칞칚o significativa.
    Python 칠 dinamicamente tipado e coletado como lixo. Suporta m칰ltiplos paradigmas de programa칞칚o,
    incluindo programa칞칚o estruturada, orientada a objetos e funcional.
    """
    
    # Permite ao usu치rio inserir texto personalizado
    escolha = input("Deseja usar:\n1 - Texto de exemplo\n2 - Seu pr칩prio texto\nEscolha (1 ou 2): ")
    
    if escolha == "2":
        print("\nDigite seu texto (pressione Enter duas vezes para finalizar):")
        linhas = []
        while True:
            linha = input()
            if linha == "":
                break
            linhas.append(linha)
        texto = "\n".join(linhas)
    else:
        texto = texto_exemplo
        print(f"\nUsando texto de exemplo:\n{texto}")
    
    # Criando o analisador e executando an치lise
    analisador = AnalisadorTexto(texto)
    print(analisador.relatorio_completo())
    
    # An치lises interativas adicionais
    while True:
        print("\n" + "="*50)
        print("Op칞칫es adicionais:")
        print("1 - Buscar palavra espec칤fica")
        print("2 - Analisar novo texto")
        print("3 - Sair")
        
        opcao = input("Escolha uma op칞칚o: ")
        
        if opcao == "1":
            palavra = input("Digite a palavra para buscar: ").lower()
            freq = analisador.palavras.count(palavra)
            print(f"A palavra '{palavra}' aparece {freq} vez(es) no texto.")
        
        elif opcao == "2":
            main()  # Reinicia o programa
            break
        
        elif opcao == "3":
            print("Obrigado por usar o Analisador de Texto! 游녦")
            break
        
        else:
            print("Op칞칚o inv치lida! Tente novamente.")

if __name__ == "__main__":
    main()
