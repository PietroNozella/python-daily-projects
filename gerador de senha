import random
import string
import re
from typing import Dict, List

class PasswordManager:
    """
    Classe para gerar e analisar senhas seguras
    """
    
    def __init__(self):
        self.lowercase = string.ascii_lowercase
        self.uppercase = string.ascii_uppercase
        self.digits = string.digits
        self.symbols = "!@#$%^&*()_+-=[]{}|;:,.<>?"
    
    def generate_password(self, length: int = 12, include_symbols: bool = True) -> str:
        """
        Gera uma senha aleatória
        
        Args:
            length (int): Comprimento da senha (padrão: 12)
            include_symbols (bool): Incluir símbolos especiais (padrão: True)
        
        Returns:
            str: Senha gerada
        """
        if length < 4:
            raise ValueError("Senha deve ter pelo menos 4 caracteres")
        
        # Caracteres obrigatórios
        password = [
            random.choice(self.lowercase),
            random.choice(self.uppercase),
            random.choice(self.digits)
        ]
        
        # Adiciona símbolo se solicitado
        if include_symbols:
            password.append(random.choice(self.symbols))
        
        # Preenche o resto da senha
        all_chars = self.lowercase + self.uppercase + self.digits
        if include_symbols:
            all_chars += self.symbols
        
        remaining_length = length - len(password)
        password.extend(random.choices(all_chars, k=remaining_length))
        
        # Embaralha a senha
        random.shuffle(password)
        
        return ''.join(password)
    
    def analyze_password(self, password: str) -> Dict[str, any]:
        """
        Analisa a força de uma senha
        
        Args:
            password (str): Senha para analisar
        
        Returns:
            Dict: Análise da senha
        """
        analysis = {
            'length': len(password),
            'has_lowercase': bool(re.search(r'[a-z]', password)),
            'has_uppercase': bool(re.search(r'[A-Z]', password)),
            'has_digits': bool(re.search(r'\d', password)),
            'has_symbols': bool(re.search(r'[!@#$%^&*()_+\-=\[\]{}|;:,.<>?]', password)),
            'strength': 'Muito Fraca'
        }
        
        # Calcula pontuação
        score = 0
        
        # Pontos por comprimento
        if analysis['length'] >= 8:
            score += 1
        if analysis['length'] >= 12:
            score += 1
        
        # Pontos por tipos de caracteres
        if analysis['has_lowercase']:
            score += 1
        if analysis['has_uppercase']:
            score += 1
        if analysis['has_digits']:
            score += 1
        if analysis['has_symbols']:
            score += 1
        
        # Determina força
        if score >= 6:
            analysis['strength'] = 'Muito Forte'
        elif score >= 5:
            analysis['strength'] = 'Forte'
        elif score >= 3:
            analysis['strength'] = 'Média'
        elif score >= 2:
            analysis['strength'] = 'Fraca'
        
        analysis['score'] = score
        return analysis
    
    def generate_multiple_passwords(self, count: int = 5, length: int = 12) -> List[str]:
        """
        Gera múltiplas senhas
        
        Args:
            count (int): Número de senhas a gerar
            length (int): Comprimento das senhas
        
        Returns:
            List[str]: Lista de senhas geradas
        """
        return [self.generate_password(length) for _ in range(count)]

def main():
    """Função principal para demonstrar o uso da classe"""
    pm = PasswordManager()
    
    print("=== GERADOR E ANALISADOR DE SENHAS ===\n")
    
    # Gera uma senha
    print("1. Gerando uma senha segura:")
    password = pm.generate_password(16)
    print(f"Senha gerada: {password}")
    
    # Analisa a senha
    print("\n2. Analisando a senha:")
    analysis = pm.analyze_password(password)
    
    print(f"Comprimento: {analysis['length']}")
    print(f"Tem minúsculas: {'✓' if analysis['has_lowercase'] else '✗'}")
    print(f"Tem maiúsculas: {'✓' if analysis['has_uppercase'] else '✗'}")
    print(f"Tem números: {'✓' if analysis['has_digits'] else '✗'}")
    print(f"Tem símbolos: {'✓' if analysis['has_symbols'] else '✗'}")
    print(f"Força: {analysis['strength']} (Score: {analysis['score']}/6)")
    
    # Gera múltiplas senhas
    print("\n3. Gerando 3 senhas diferentes:")
    passwords = pm.generate_multiple_passwords(3, 14)
    for i, pwd in enumerate(passwords, 1):
        strength = pm.analyze_password(pwd)['strength']
        print(f"Senha {i}: {pwd} (Força: {strength})")
    
    # Testa senha fraca
    print("\n4. Testando senha fraca:")
    weak_password = "123456"
    weak_analysis = pm.analyze_password(weak_password)
    print(f"Senha: {weak_password}")
    print(f"Força: {weak_analysis['strength']} (Score: {weak_analysis['score']}/6)")

if __name__ == "__main__":
    main()
